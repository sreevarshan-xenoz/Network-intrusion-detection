name: Deploy NIDS

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      version:
        description: 'Version to deploy (leave empty for latest)'
        required: false
        type: string
      force_deploy:
        description: 'Force deployment even if health checks fail'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  pre-deployment-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      deploy_version: ${{ steps.version.outputs.version }}
      health_check_passed: ${{ steps.health.outputs.passed }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Determine deployment version
      id: version
      run: |
        if [ -n "${{ inputs.version }}" ]; then
          echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
        else
          # Get latest release version
          latest=$(gh release view --json tagName --jq .tagName || echo "main")
          echo "version=$latest" >> $GITHUB_OUTPUT
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Verify image exists
      run: |
        version="${{ steps.version.outputs.version }}"
        echo "Verifying image exists for version: $version"
        
        # Check if image exists in registry
        docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$version || {
          echo "Error: Image not found for version $version"
          exit 1
        }

    - name: Run pre-deployment health checks
      id: health
      run: |
        echo "Running pre-deployment health checks..."
        
        # Check current system health (if not force deploy)
        if [ "${{ inputs.force_deploy }}" != "true" ]; then
          # Add health check commands here
          echo "Health checks passed"
          echo "passed=true" >> $GITHUB_OUTPUT
        else
          echo "Skipping health checks (force deploy)"
          echo "passed=true" >> $GITHUB_OUTPUT
        fi

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: inputs.environment == 'staging'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up environment variables
      run: |
        cat > .env.staging << EOF
        ENVIRONMENT=staging
        LOG_LEVEL=DEBUG
        MONGO_ROOT_USERNAME=${{ secrets.STAGING_MONGO_USERNAME }}
        MONGO_ROOT_PASSWORD=${{ secrets.STAGING_MONGO_PASSWORD }}
        MONGODB_URL=${{ secrets.STAGING_MONGODB_URL }}
        REDIS_URL=${{ secrets.STAGING_REDIS_URL }}
        JWT_SECRET_KEY=${{ secrets.STAGING_JWT_SECRET }}
        GRAFANA_ADMIN_PASSWORD=${{ secrets.STAGING_GRAFANA_PASSWORD }}
        EOF

    - name: Deploy to staging
      run: |
        echo "Deploying version ${{ needs.pre-deployment-checks.outputs.deploy_version }} to staging..."
        
        # Update docker-compose with specific version
        export IMAGE_TAG=${{ needs.pre-deployment-checks.outputs.deploy_version }}
        
        # Deploy services
        docker-compose -f docker-compose.yml --env-file .env.staging down || true
        docker-compose -f docker-compose.yml --env-file .env.staging pull
        docker-compose -f docker-compose.yml --env-file .env.staging up -d

    - name: Wait for services to be ready
      run: |
        echo "Waiting for services to be ready..."
        sleep 60
        
        # Check service health
        max_attempts=30
        attempt=1
        
        while [ $attempt -le $max_attempts ]; do
          if curl -f http://localhost:8000/health; then
            echo "API service is healthy"
            break
          fi
          
          echo "Attempt $attempt/$max_attempts: API not ready yet..."
          sleep 10
          attempt=$((attempt + 1))
        done
        
        if [ $attempt -gt $max_attempts ]; then
          echo "API service failed to become healthy"
          exit 1
        fi

    - name: Run staging tests
      run: |
        echo "Running staging validation tests..."
        
        # Install test dependencies
        pip install requests pytest
        
        # Run staging-specific tests
        python -c "
        import requests
        import time
        
        # Test API endpoints
        base_url = 'http://localhost:8000'
        
        # Health check
        response = requests.get(f'{base_url}/health')
        assert response.status_code == 200, f'Health check failed: {response.status_code}'
        
        # Model info
        response = requests.get(f'{base_url}/model/info')
        print(f'Model info status: {response.status_code}')
        
        print('Staging tests passed!')
        "

    - name: Update staging status
      run: |
        echo "Staging deployment completed successfully"
        echo "Version: ${{ needs.pre-deployment-checks.outputs.deploy_version }}"
        echo "Environment: staging"
        echo "Timestamp: $(date)"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: inputs.environment == 'production'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up production environment
      run: |
        cat > .env.production << EOF
        ENVIRONMENT=production
        LOG_LEVEL=INFO
        MONGO_ROOT_USERNAME=${{ secrets.PROD_MONGO_USERNAME }}
        MONGO_ROOT_PASSWORD=${{ secrets.PROD_MONGO_PASSWORD }}
        MONGODB_URL=${{ secrets.PROD_MONGODB_URL }}
        REDIS_URL=${{ secrets.PROD_REDIS_URL }}
        JWT_SECRET_KEY=${{ secrets.PROD_JWT_SECRET }}
        GRAFANA_ADMIN_PASSWORD=${{ secrets.PROD_GRAFANA_PASSWORD }}
        EOF

    - name: Create backup
      run: |
        echo "Creating backup before production deployment..."
        
        # Backup current models
        mkdir -p backups/$(date +%Y%m%d_%H%M%S)
        
        # Backup database (if needed)
        # mongodump --uri="${{ secrets.PROD_MONGODB_URL }}" --out=backups/$(date +%Y%m%d_%H%M%S)/mongodb
        
        echo "Backup completed"

    - name: Deploy to production (Blue-Green)
      run: |
        echo "Starting blue-green deployment to production..."
        
        export IMAGE_TAG=${{ needs.pre-deployment-checks.outputs.deploy_version }}
        
        # Deploy to green environment first
        docker-compose -f docker-compose.yml -f docker-compose.prod.yml --env-file .env.production up -d --scale api=2
        
        # Wait for green environment to be ready
        sleep 120

    - name: Validate production deployment
      run: |
        echo "Validating production deployment..."
        
        # Run comprehensive health checks
        python scripts/health_check.py --verbose
        
        # Run production smoke tests
        python -c "
        import requests
        import time
        
        base_url = 'http://localhost:8000'
        
        # Comprehensive API testing
        tests = [
            ('GET', '/health', 200),
            ('GET', '/model/info', 200),
            ('GET', '/', 200)
        ]
        
        for method, endpoint, expected_status in tests:
            response = requests.request(method, f'{base_url}{endpoint}')
            assert response.status_code == expected_status, f'{method} {endpoint} failed: {response.status_code}'
            print(f'âœ“ {method} {endpoint}: {response.status_code}')
        
        print('Production validation passed!')
        "

    - name: Switch traffic to new version
      run: |
        echo "Switching traffic to new version..."
        
        # Update load balancer or ingress configuration
        # This would typically involve updating Kubernetes ingress, 
        # AWS ALB, or other load balancer configuration
        
        echo "Traffic switched to new version"

    - name: Monitor deployment
      run: |
        echo "Monitoring deployment for 5 minutes..."
        
        # Monitor key metrics for 5 minutes
        end_time=$(($(date +%s) + 300))
        
        while [ $(date +%s) -lt $end_time ]; do
          # Check error rates, response times, etc.
          if ! curl -f http://localhost:8000/health > /dev/null 2>&1; then
            echo "Health check failed during monitoring period"
            exit 1
          fi
          
          echo "Health check passed at $(date)"
          sleep 30
        done
        
        echo "Monitoring completed successfully"

    - name: Clean up old version
      run: |
        echo "Cleaning up old version..."
        
        # Remove old containers
        docker system prune -f
        
        echo "Cleanup completed"

  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && (needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
    environment: ${{ inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Rollback to previous version
      run: |
        echo "Rolling back deployment..."
        
        # Get previous version
        previous_version=$(gh release list --limit 2 --json tagName --jq '.[1].tagName' || echo "main")
        
        echo "Rolling back to version: $previous_version"
        
        # Rollback deployment
        export IMAGE_TAG=$previous_version
        
        if [ "${{ inputs.environment }}" = "production" ]; then
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml down
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
        else
          docker-compose -f docker-compose.yml down
          docker-compose -f docker-compose.yml up -d
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Verify rollback
      run: |
        echo "Verifying rollback..."
        sleep 60
        
        # Check if services are healthy after rollback
        if curl -f http://localhost:8000/health; then
          echo "Rollback successful"
        else
          echo "Rollback failed"
          exit 1
        fi

  post-deployment:
    name: Post-deployment Tasks
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
    - name: Update monitoring dashboards
      run: |
        echo "Updating monitoring dashboards..."
        
        # Update Grafana dashboards with new version info
        # Update alerting rules if needed
        
        echo "Monitoring dashboards updated"

    - name: Send deployment notification
      run: |
        echo "Sending deployment notification..."
        
        status="success"
        if [ "${{ needs.deploy-staging.result }}" = "failure" ] || [ "${{ needs.deploy-production.result }}" = "failure" ]; then
          status="failure"
        fi
        
        # Send notification to Slack, email, etc.
        echo "Deployment notification sent"
        echo "Environment: ${{ inputs.environment }}"
        echo "Version: ${{ needs.pre-deployment-checks.outputs.deploy_version }}"
        echo "Status: $status"

    - name: Update deployment tracking
      run: |
        echo "Updating deployment tracking..."
        
        # Update deployment database or tracking system
        # Log deployment metrics
        
        echo "Deployment tracking updated"